/* LinuxCNC SPI component targeting ST-7i92 PnP BoB through Mesa HM2
 * Author: Jason Kercher and Justin White
 * License: GPLv2
*/

component pnp "pnp";

description "Component for ST-7i92 BoB";

// Pins,params for Analog MCU
pin out u32   analog-in0.raw;           // unfiltered integer value from ADC
pin out float analog-in0.in;            // scaled, filtered ADC value output as float
pin in  float analog-in0.scale_gain;    // refer to vari-bit-adc.comp
pin in  bit   analog-in0.filter_enable; // refer to vari-bit-adc.comp
pin in  float analog-in0.filter_gain;   // refer to vari-bit-adc.comp
pin out u32   analog-in1.raw;
pin out float analog-in1.in;
pin in  float analog-in1.scale_gain;
pin in  bit   analog-in1.filter_enable;
pin in  float analog-in1.filter_gain;
pin out u32   analog-in2.raw;
pin out float analog-in2.in;
pin in  float analog-in2.scale_gain;
pin in  bit   analog-in2.filter_enable;
pin in  float analog-in2.filter_gain;
pin out u32   analog-in3.raw;
pin out float analog-in3.in;
pin in  float analog-in3.scale_gain;
pin in  bit   analog-in3.filter_enable;
pin in  float analog-in3.filter_gain;

// Pins,params for Step Drive MCU, these values should reside in MCU EEPROM to overwrite the flash defaults
param rw u32 stepdrive0-runcur;
param rw u32 stepdrive0-hldcur;
param rw u32 stepdrive0-ustep;
param rw u32 stepdrive1-runcur;
param rw u32 stepdrive1-hldcur;
param rw u32 stepdrive1-ustep;
param rw u32 stepdrive2-runcur;
param rw u32 stepdrive2-hldcur;
param rw u32 stepdrive2-ustep;
param rw u32 stepdrive3-runcur;
param rw u32 stepdrive3-hldcur;
param rw u32 stepdrive3-ustep;
param rw u32 stepdrive4-runcur;
param rw u32 stepdrive4-hldcur;
param rw u32 stepdrive4-ustep;
param rw u32 stepdrive5-runcur;
param rw u32 stepdrive5-hldcur;
param rw u32 stepdrive5-ustep;


option extra_setup yes;
//option count_function yes;

variable unsigned firstrun;

variable unsigned *_step_drive_rx;
variable unsigned *_step_drive_tx;
variable unsigned *_analog_rx[2];
variable unsigned *_analog_tx[2];

license "GPLv2";

include <hostmot2-serial.h>;
;;

static int
read(void* subdata) {
	struct __comp_state* __comp_inst = subdata;

	if (*_step_drive_rx != 0) rtapi_print("step_drive: %08x\n", *_step_drive_rx);
	if (*_analog_rx[0] != 0) rtapi_print("analog: %08x\r\n", *_analog_rx[0]);

	analog_in0_raw = *_analog_rx[0] & 0xff;
	analog_in1_raw = (*_analog_rx[0] >> 8 ) & 0xff;
	analog_in2_raw = (*_analog_rx[0] >> 16) & 0xff;
	analog_in3_raw = (*_analog_rx[0] >> 24) & 0xff;

	analog_in0_raw |= (*_analog_rx[1] & 0x000f) << 8;
	analog_in1_raw |= (*_analog_rx[1] & 0x00f0) << 4;
	analog_in2_raw |= (*_analog_rx[1] & 0x0f00);
	analog_in3_raw |= (*_analog_rx[1] & 0xf000) >> 4;
	
	if (*_analog_rx[1] != 0) rtapi_print("analog: %08x\r\n", *_analog_rx[1]);

	*_step_drive_tx = 0x0123456;

	return 0;
}

static int
write(void* subdata) {
	struct __comp_state* __comp_inst = subdata;
	*_step_drive_tx = 0xdeadbeef;
	return 0;
}

EXTRA_SETUP() {
	int i, r;
	char* name = "hm2_7i92.0.bspi.0"; // Exact channel name needed to work here, but it should be done with [extra_arg] like the 7i65 comp//

	//hm2_bspi_setup_chan(name, chan, cs, bits, mhz, delay(ns), cpol, cpha, /clear, /echo, samplelate)
	// CS0 loopback Echo, CS0, ~ 4 MHz, CPOL, 32 bits
	r = hm2_bspi_setup_chan(name, 0, 0, 32, 4, 0, 1, 0, 1, 0, 0);
	//Chan 1, 48bit split in 2 packets
	r = hm2_bspi_setup_chan(name, 1, 1, 32, 4, 0, 1, 0, 1, 0, 0);
	r = hm2_bspi_setup_chan(name, 1, 1, 16, 4, 0, 1, 0, 0, 0, 0);
	if (r < 0) {
		rtapi_print_msg(
		    RTAPI_MSG_ERR,
		    "There have been %i errors during channel setup, "
		    "quitting\n",
		    -r);
		return -EINVAL;
	}

	// Setup ADC
	// ADC, chans 0-3, 0 to +5v
	r += hm2_bspi_write_chan(name, 1, 0x0000A000);

	if (r < 0) {
		rtapi_print_msg(
		    RTAPI_MSG_ERR,
		    "There have been %i errors during ADC setup, "
		    "quitting\n",
		    -r);
		return -EINVAL;
	}

	// Clear BSPI Rx & Tx FIFOs.
	// This discards the received data from the ADC setup writes above,
	// and any other old stale data.
	r = hm2_bspi_clear_fifo(name);
	if (r < 0) { rtapi_print_msg(RTAPI_MSG_ERR, "failed to clear BSPI fifos on %s\n", name); }

	// Add BSPI Frames
	r = hm2_tram_add_bspi_frame(name, 0, &_step_drive_tx, &_step_drive_rx);
	r = hm2_tram_add_bspi_frame(name, 1, &_analog_tx[0], &_analog_rx[0]);

	// TODO: no way this is right...
	r = hm2_tram_add_bspi_frame(name, 1, &_analog_tx[1], &_analog_rx[1]);

	// This is required, or nothing happens.
	r += hm2_allocate_bspi_tram(name);

	// Tell the bspi driver which function to call
	r += hm2_bspi_set_read_function(name, &read, __comp_inst);

	// no separate write function in this example, but it would be:
	r += hm2_bspi_set_write_function(name, &write, __comp_inst);

	if (r < 0) {
		rtapi_print_msg(
		    RTAPI_MSG_ERR,
		    "There have been %i errors during TRAM allocation setup, "
		    "quitting\n",
		    -r);
		return -EINVAL;
	}
	return 0;
}
