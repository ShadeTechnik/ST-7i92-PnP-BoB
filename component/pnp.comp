component pnp "pnp";

description "Does stuff";

pin out float happy_output_pin;
pin in float happy_input_pin;

option extra_setup yes;
//option count_function yes;

variable unsigned *read_frame;
variable unsigned *write_frame;

license "Proprietary";

include <hostmot2-serial.h>;
;;

static int read(void *subdata) {
    struct __comp_state *__comp_inst = subdata;

    rtapi_print("rx: %08x\n", *read_frame);

    *write_frame = 0xa5a5a5a;

    return 0;
}

static int write(void *subdata) {
    struct __comp_state *__comp_inst = subdata;
    *write_frame = 0xdeadbeef;
    return 0;
}

EXTRA_SETUP(){
    int i, r;
    char *name = "channel_name.0.bspi.0";

    //hm2_bspi_setup_chan(name, chan, cs, bits, mhz, delay(ns), cpol, cpha, /clear, /echo, samplelate)
    // CS0 loopback Echo, CS0, ~ 4 MHz, CPOL, 32 bits
    r = hm2_bspi_setup_chan(name, 0, 0, 32, 4, 0, 1, 0, 0, 0, 0);
    if (r < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR,
                      "There have been %i errors during channel setup, "
                      "quitting\n", -r);
        return -EINVAL;
    }

    // Clear BSPI Rx & Tx FIFOs.
    // This discards the received data from the ADC setup writes above,
    // and any other old stale data.
    r = hm2_bspi_clear_fifo(name);
    if (r < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "failed to clear BSPI fifos on %s\n", name);
    }

    // Add BSPI Frames
    r = hm2_tram_add_bspi_frame(name, 1, &write_frame, &read_frame);

    // This is required, or nothing happens.
    r += hm2_allocate_bspi_tram(name);

    // Tell the bspi driver which function to call
    r += hm2_bspi_set_read_function(name, &read, __comp_inst);

    // no separate write function in this example, but it would be:
    r += hm2_bspi_set_write_function(name, &write, __comp_inst);

    if (r < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR,
                      "There have been %i errors during TRAM allocation setup, "
                      "quitting\n", -r);
        return -EINVAL;
    }
    return 0;
}
